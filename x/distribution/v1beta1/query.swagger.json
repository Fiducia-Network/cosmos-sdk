{
  "swagger": "2.0",
  "info": {
    "title": "cosmos/distribution/v1beta1/query.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/cosmos/distribution/v1beta1/community_pool": {
      "get": {
        "summary": "CommunityPool queries the community pool coins.",
        "operationId": "Query_CommunityPool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1QueryCommunityPoolResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Query"
        ]
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards": {
      "get": {
        "summary": "DelegationTotalRewards queries the total rewards accrued by a each validator.",
        "operationId": "Query_DelegationTotalRewards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1QueryDelegationTotalRewardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "delegator_address",
            "description": "delegator_address defines the delegator address to query for.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}": {
      "get": {
        "summary": "DelegationRewards queries the total rewards accrued by a delegation.",
        "operationId": "Query_DelegationRewards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1QueryDelegationRewardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "delegator_address",
            "description": "delegator_address defines the delegator address to query for.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "validator_address",
            "description": "validator_address defines the validator address to query for.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators": {
      "get": {
        "summary": "DelegatorValidators queries the validators of a delegator.",
        "operationId": "Query_DelegatorValidators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1QueryDelegatorValidatorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "delegator_address",
            "description": "delegator_address defines the delegator address to query for.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address": {
      "get": {
        "summary": "DelegatorWithdrawAddress queries withdraw address of a delegator.",
        "operationId": "Query_DelegatorWithdrawAddress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1QueryDelegatorWithdrawAddressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "delegator_address",
            "description": "delegator_address defines the delegator address to query for.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/cosmos/distribution/v1beta1/params": {
      "get": {
        "summary": "Params queries params of the distribution module.",
        "operationId": "Query_Params",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1QueryParamsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Query"
        ]
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validator_address}/commission": {
      "get": {
        "summary": "ValidatorCommission queries accumulated commission for a validator.",
        "operationId": "Query_ValidatorCommission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1QueryValidatorCommissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "validator_address",
            "description": "validator_address defines the validator address to query for.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards": {
      "get": {
        "summary": "ValidatorOutstandingRewards queries rewards of a validator address.",
        "operationId": "Query_ValidatorOutstandingRewards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1QueryValidatorOutstandingRewardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "validator_address",
            "description": "validator_address defines the validator address to query for.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validator_address}/slashes": {
      "get": {
        "summary": "ValidatorSlashes queries slash events of a validator.",
        "operationId": "Query_ValidatorSlashes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1beta1QueryValidatorSlashesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "validator_address",
            "description": "validator_address defines the validator address to query for.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "starting_height",
            "description": "starting_height defines the optional starting height to query the slashes.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "ending_height",
            "description": "starting_height defines the optional ending height to query the slashes.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs. count_total\nis only respected when offset is used. It is ignored when key is set.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1beta1DecCoin": {
      "type": "object",
      "properties": {
        "denom": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        }
      },
      "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
    },
    "v1beta1DelegationDelegatorReward": {
      "type": "object",
      "properties": {
        "validator_address": {
          "type": "string",
          "format": "byte"
        },
        "reward": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1DecCoin"
          }
        }
      },
      "description": "DelegationDelegatorReward defines the properties\nof a delegator's delegation reward."
    },
    "v1beta1PageRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set."
        },
        "offset": {
          "type": "string",
          "format": "uint64",
          "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set."
        },
        "limit": {
          "type": "string",
          "format": "uint64",
          "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app."
        },
        "count_total": {
          "type": "boolean",
          "format": "boolean",
          "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs. count_total\nis only respected when offset is used. It is ignored when key is set."
        }
      },
      "description": "message SomeRequest {\n         Foo some_parameter = 1;\n         PageRequest pagination = 2;\n }",
      "title": "PageRequest is to be embedded in gRPC request messages for efficient\npagination. Ex:"
    },
    "v1beta1PageResponse": {
      "type": "object",
      "properties": {
        "next_key": {
          "type": "string",
          "format": "byte",
          "title": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently"
        },
        "total": {
          "type": "string",
          "format": "uint64",
          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise"
        }
      },
      "description": "message SomeResponse {\n         repeated Bar results = 1;\n         PageResponse page = 2;\n }",
      "title": "PageResponse is to be embedded in gRPC response messages where the corresponding\nrequest message has used PageRequest"
    },
    "v1beta1Params": {
      "type": "object",
      "properties": {
        "community_tax": {
          "type": "string"
        },
        "base_proposer_reward": {
          "type": "string"
        },
        "bonus_proposer_reward": {
          "type": "string"
        },
        "withdraw_addr_enabled": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "description": "Params defines the set of distribution parameters."
    },
    "v1beta1QueryCommunityPoolResponse": {
      "type": "object",
      "properties": {
        "pool": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1DecCoin"
          },
          "description": "pool defines community pool's coins."
        }
      },
      "description": "QueryCommunityPoolResponse is the response type for the Query/CommunityPool RPC method."
    },
    "v1beta1QueryDelegationRewardsResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1DecCoin"
          },
          "description": "rewards defines the rewards accrued by a delegation."
        }
      },
      "description": "QueryDelegationRewardsResponse is the response type for the Query/DelegationRewards RPC method."
    },
    "v1beta1QueryDelegationTotalRewardsResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1DelegationDelegatorReward"
          },
          "description": "rewards defines all the rewards accrued by a delegator."
        },
        "total": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1DecCoin"
          },
          "description": "total defines the sum of all the rewards."
        }
      },
      "description": "QueryDelegationTotalRewardsResponse is the response type for the Query/DelegationTotalRewards RPC method."
    },
    "v1beta1QueryDelegatorValidatorsResponse": {
      "type": "object",
      "properties": {
        "validators": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "validators defines the validators a delegator is delegating for."
        }
      },
      "description": "QueryDelegatorValidatorsResponse is the response type for the Query/DelegatorValidators RPC method."
    },
    "v1beta1QueryDelegatorWithdrawAddressResponse": {
      "type": "object",
      "properties": {
        "withdraw_address": {
          "type": "string",
          "format": "byte",
          "description": "withdraw_address defines the delegator address to query for."
        }
      },
      "description": "QueryDelegatorWithdrawAddressResponse is the response type for the Query/DelegatorWithdrawAddress RPC method."
    },
    "v1beta1QueryParamsResponse": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/v1beta1Params",
          "description": "params defines the parameters of the module."
        }
      },
      "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
    },
    "v1beta1QueryValidatorCommissionResponse": {
      "type": "object",
      "properties": {
        "commission": {
          "$ref": "#/definitions/v1beta1ValidatorAccumulatedCommission",
          "description": "commission defines the commision the validator received."
        }
      },
      "title": "QueryValidatorCommissionResponse is the response type for the Query/ValidatorCommission RPC method"
    },
    "v1beta1QueryValidatorOutstandingRewardsResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "$ref": "#/definitions/v1beta1ValidatorOutstandingRewards"
        }
      },
      "description": "QueryValidatorOutstandingRewardsResponse is the response type for the Query/ValidatorOutstandingRewards RPC method."
    },
    "v1beta1QueryValidatorSlashesResponse": {
      "type": "object",
      "properties": {
        "slashes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1ValidatorSlashEvent"
          },
          "description": "slashes defines the slashes the validator received."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination defines the pagination in the response."
        }
      },
      "description": "QueryValidatorSlashesResponse is the response type for the Query/ValidatorSlashes RPC method."
    },
    "v1beta1ValidatorAccumulatedCommission": {
      "type": "object",
      "properties": {
        "commission": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1DecCoin"
          }
        }
      },
      "title": "accumulated commission for a validator\nkept as a running counter, can be withdrawn at any time"
    },
    "v1beta1ValidatorOutstandingRewards": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1DecCoin"
          }
        }
      },
      "title": "outstanding (un-withdrawn) rewards for a validator\ninexpensive to track, allows simple sanity checks"
    },
    "v1beta1ValidatorSlashEvent": {
      "type": "object",
      "properties": {
        "validator_period": {
          "type": "string",
          "format": "uint64"
        },
        "fraction": {
          "type": "string"
        }
      },
      "title": "validator slash event\nheight is implicit within the store key\nneeded to calculate appropriate amounts of staking token\nfor delegations which withdraw after a slash has occurred"
    }
  }
}
